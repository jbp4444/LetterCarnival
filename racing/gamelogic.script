
local globals = require( 'lib.GlobalVars' )
local myrandom = require( 'lib.RandomLetter' )
local deque = require( 'lib.deque' )


-- can use socket.gettime() too:
math.randomseed( os.time() )


local lvl_speed  = {   75,  100,  150,  200,  250,  300 }


function check_level_up( self )
	n_hit = 0
	n_miss = 0
	for obj in self.last_tgts:iterRight() do
		if( obj == 'hit' ) then
			n_hit = n_hit + 1
		elseif( obj == 'miss' ) then
			n_miss = n_miss + 1
		elseif( obj == 'level' ) then
			break
		end
	end

	if( n_hit >= 10 ) then
		self.last_tgts:pushRight( 'level' )
		msg.post( '/basehud/hud', 'level_up' )
		self.level = self.level + 1
		if( self.level > 6 ) then
			self.level = 6
		end
	end
end


function init(self)
	-- Add initialization code here
	self.active = false
	self.timer = 0
	self.last_tgts = deque.new(20)
	self.level = 1
	self.last_key = ''
	self.is_spinning = false

	self.letters = { myrandom.randomLetter(), myrandom.randomLetter() }
	self.active_letter = 1
	label.set_text( '/letter#letter1', self.letters[1] )
	label.set_text( '/letter#letter2', self.letters[2] )

	msg.post( '/basehud/hud', 'register', { script='/gamelogic#gamelogic', type='single' } )
	msg.post( '/basehud/hud', 'ready_go', {} )

	msg.post( '.', 'acquire_input_focus' )
end


function after_spin( self )
	if( self.active_letter == 1 ) then
		self.letters[2] = myrandom.randomLetter()
		label.set_text( '/letter#letter2', self.letters[2] )
	else
		self.letters[1] = myrandom.randomLetter()
		label.set_text( '/letter#letter1', self.letters[1] )
	end
	print( self.active_letter, self.letters[1], self.letters[2] )
	self.is_spinning = false
end


function on_message(self, message_id, message, sender)
	if( message_id == hash('player_wins') ) then
		if( self.active ) then
			self.active = false
			msg.post( '/basehud/hud', 'game_over', { player_wins=true } )
		end
	elseif( message_id == hash('player_loses') ) then
		if( self.active ) then
			self.active = false
			msg.post( '/basehud/hud', 'game_over', { player_loses=true } )
		end

	elseif( message_id == hash('game_start') ) then
		self.active = true
		msg.post( '/opponent#opponent', 'game_start' )
	elseif( message_id == hash('game_over') ) then
		self.active = false
	elseif( message_id == hash('back_button') ) then
		self.active = false
		msg.post( '/basehud/hud', 'game_exit' )
	elseif( message_id == hash('final_exit') ) then
		self.active = false
		msg.post( 'loader:/go#loader', 'start_mainmenu' )
	else
		print('unknown message - '..message_id )
	end
end


function on_input(self, action_id, action)
	-- Add input-handling code here
	local rtn = false
	if( self.active and (action_id == hash('keypress')) ) then
		if( self.is_spinning == false ) then
			local txt = string.upper(action.text)
			local act_txt = self.letters[ self.active_letter ]
			if( txt == act_txt ) then
				-- trigger animation
				local rot = go.get( '/letter', 'euler' )
				rot.z = rot.z + 180
				self.is_spinning = true
				go.animate( '/letter', 'euler.z', go.PLAYBACK_ONCE_FORWARD, rot.z, go.EASING_LINEAR, 0.33, 0, after_spin )
				-- particlefx.play( '#fireworks' )
				-- factory.create( '/sparkleFactory#factory', nil, nil, {}, nil )

				self.last_tgts:pushRight( 'hit' )
				sound.play( '#sound' )
				msg.post( '/player#player', 'move_forward' )
				msg.post( '/basehud/hud', 'score', {score=5} )

				if( self.active_letter == 1 ) then
					self.active_letter = 2
				else
					self.active_letter = 1
				end
			else
				self.last_tgts:pushRight( 'miss' )
			end
			check_level_up( self )
		end
	end
	return rtn
end

