
local myrandom = require( 'lib.RandomLetter' )

-- can use socket.gettime() too:
math.randomseed( os.time() )

-- how quick to replace "downed" letters?
local frequency = 0.333

-- global var defined in moleFactory.script
-- mole_objs[]

function init(self)
	print( 'gamelogic init' )

	self.active = false
	self.letters = {}
	mole_objs = {}
	self.mole_state = {}

	-- trigger the initial 'start-game' animation
	msg.post( '/basehud/hud', 'register', { script='/gamelogic#gamelogic', type='single' } )
	msg.post( '/basehud/hud', 'ready_go', {} )
	msg.post( '.', 'acquire_input_focus' )

	-- trigger a pop-up after a few seconds
	self.timer = 2
end

function post_init(self)
	print( 'gamelogic post_init' )
	for i=1,7 do
		local ltr = myrandom.randomLetter()
		table.insert( self.letters, ltr )
		table.insert( self.mole_state, 'down' )
		msg.post( mole_objs[i], 'go_down' )
		msg.post( mole_objs[i], 'set_letter', { letter=ltr } )
	end
end

function update(self, dt)
	if( self.active ) then
		self.timer = self.timer - dt
		if( self.timer <= 0 ) then
			-- trigger one mole to pop-up
			-- pprint( self.mole_state )
			local m_down = {}
			for i=1,7 do
				if( self.mole_state[i] == 'down' ) then
					table.insert( m_down, i )
				end
			end

			if( #m_down > 0 ) then
				local rn = math.random(1,#m_down)
				local m_num = m_down[rn]
				local rt = math.random(1,3)
				msg.post( mole_objs[m_num], 'go_up', {duration=rt} )
			end

			self.timer = 1.0/frequency
		end
	end
end

function on_message( self, message_id, message, sender )
	-- Add message-handling code here
	-- sender has {socket,path,fragment}
	local sender_num = -1
	for i=1,7 do
		if( sender.path == mole_objs[i] ) then
			sender_num = i
			break
		end
	end
	print( 'recv fr ',sender_num )

	if( message_id == hash('mole_down') ) then
		self.mole_state[sender_num] = 'down'
		-- give it a new random letter
		local ltr = myrandom.randomLetter()
		self.letters[sender_num] = ltr
		msg.post( mole_objs[sender_num], 'set_letter', { letter=ltr } )

	elseif( message_id == hash('mole_up') ) then
		self.mole_state[sender_num] = 'up'

	elseif( message_id == hash('mole_expired') ) then
		print('mole was missed')
		self.mole_state[sender_num] = 'down'
		-- give it a new random letter
		local ltr = myrandom.randomLetter()
		self.letters[sender_num] = ltr
		print('mole obj = ',mole_objs[sender_num], sender, go.get_world_position(sender) )
		msg.post( '/basehud/hud', 'missed', { pos=go.get_world_position(mole_objs[sender_num]) } )
		msg.post( mole_objs[sender_num], 'set_letter', { letter=ltr } )

	elseif( message_id == hash('game_start') ) then
		self.active = true
		post_init(self)
	elseif( message_id == hash('game_over') ) then
		self.active = false
	elseif( message_id == hash('back_button') ) then
		self.active = false
		msg.post( '/basehud/hud', 'game_exit' )
	elseif( message_id == hash('final_exit') ) then
		self.active = false
		msg.post( 'loader:/go#loader', 'start_mainmenu' )
	else
		print('unknown message - '..message_id )
	end
end

function on_input( self, action_id, action )
	-- Add input-handling code here
	if( action_id == hash('keypress') ) then
		local letter_pressed = string.upper( action.text )
		for i=1,7 do
			if( (letter_pressed==self.letters[i]) and (self.mole_state[i]=='up') ) then
				msg.post( mole_objs[i], 'go_down' )
				msg.post( '/basehud/hud', 'score', {score=5,mole_id=i} )
				break
			end
		end
	end
end

