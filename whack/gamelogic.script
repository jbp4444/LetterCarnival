
local globals = require( 'lib.GlobalVars' )
local myrandom = require( 'lib.RandomLetter' )
local deque = require( 'lib.deque' )


-- can use socket.gettime() too:
math.randomseed( os.time() )


-- global var defined in moleFactory.script
-- mole_objs[]

local lvl_uptime = {  3.0,  2.5,  2.0,  1.7,  1.4,  1.1 }
local lvl_period = {  4.0,  3.5,  3.0,  2.5,  2.0,  1.5 }


function check_level_up( self )
	n_hit = 0
	n_miss = 0
	for obj in self.last_tgts:iterRight() do
		if( obj == 'hit' ) then
			n_hit = n_hit + 1
		elseif( obj == 'miss' ) then
			n_miss = n_miss + 1
		elseif( obj == 'level' ) then
			break
		end
	end

	if( n_hit >= 10 ) then
		self.last_tgts:pushRight( 'level' )
		msg.post( '/basehud/hud', 'level_up' )
		self.level = self.level + 1
		if( self.level > 6 ) then
			self.level = 6
		end
	end
end


function init(self)
	self.timer = 0
	self.active = false
	self.level = 1
	self.last_tgts = deque.new(20)
	self.letters = {}
	mole_objs = {}
	self.mole_state = {}

	-- trigger the initial 'start-game' animation
	msg.post( '/basehud/hud', 'register', { script='/gamelogic#gamelogic', type='single' } )
	msg.post( '/basehud/hud', 'ready_go', {} )
	msg.post( '.', 'acquire_input_focus' )
end


function post_init(self)
	print( 'gamelogic post_init' )
	for i=1,7 do
		local ltr = myrandom.randomLetter()
		table.insert( self.letters, ltr )
		table.insert( self.mole_state, 'down' )
		msg.post( mole_objs[i], 'go_down' )
		msg.post( mole_objs[i], 'set_letter', { letter=ltr } )
	end
end


function update(self, dt)
	if( self.active ) then
		self.timer = self.timer - dt
		if( self.timer <= 0 ) then
			-- trigger one mole to pop-up
			local m_down = {}
			for i=1,7 do
				if( self.mole_state[i] == 'down' ) then
					table.insert( m_down, i )
				end
			end

			if( #m_down > 0 ) then
				local rn = math.random(1,#m_down)
				local m_num = m_down[rn]
				-- give it a new random letter
				local ltr = myrandom.randomLetter()
				self.letters[m_num] = ltr
				msg.post( mole_objs[m_num], 'set_letter', { letter=ltr } )
				local uptime = lvl_uptime[self.level]
				local rt = math.random(1,uptime)
				msg.post( mole_objs[m_num], 'go_up', { duration=rt } )
				sound.play( '#sound_up' )
			end

			self.timer = lvl_period[self.level]
		end
	end
end


function on_message( self, message_id, message, sender )
	-- Add message-handling code here
	-- sender has {socket,path,fragment}
	local sender_num = -1
	for i=1,7 do
		if( sender.path == mole_objs[i] ) then
			sender_num = i
			break
		end
	end
	print( 'recv fr ',sender_num )

	if( message_id == hash('mole_down') ) then
		self.mole_state[sender_num] = 'down'
	elseif( message_id == hash('mole_up') ) then
		self.mole_state[sender_num] = 'up'
	elseif( message_id == hash('mole_expired') ) then
		print('mole was missed')
		self.mole_state[sender_num] = 'down'
		msg.post( '/basehud/hud', 'missed', { pos=go.get_world_position(mole_objs[sender_num]) } )
		sound.play( '#sound_down' )
		self.last_tgts:pushRight( 'miss' )
		check_level_up( self )
		
	elseif( message_id == hash('game_start') ) then
		self.active = true
		post_init(self)
	elseif( message_id == hash('game_over') ) then
		self.active = false
	elseif( message_id == hash('back_button') ) then
		self.active = false
		msg.post( '/basehud/hud', 'game_exit' )
	elseif( message_id == hash('final_exit') ) then
		self.active = false
		msg.post( 'loader:/go#loader', 'start_mainmenu' )
	else
		print('unknown message - '..message_id )
	end
end


function on_input( self, action_id, action )
	-- Add input-handling code here
	if( self.active and (action_id == hash('keypress')) ) then
		local letter_pressed = string.upper( action.text )
		local miss = true
		for i=1,7 do
			if( (letter_pressed==self.letters[i]) and (self.mole_state[i]=='up') ) then
				self.last_tgts:pushRight( 'hit' )
				msg.post( mole_objs[i], 'go_down' )
				msg.post( '/basehud/hud', 'score', {score=5,mole_id=i} )
				miss = false
				break
			end
		end
		if( miss ) then
			msg.post( '/basehud/hud', 'missed', { pos=vmath.vector3(512, 0, 0.95) } )
			self.last_tgts:pushRight( 'miss' )
		end
		check_level_up( self )
	end
end

