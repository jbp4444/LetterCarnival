
local globals = require( 'lib.GlobalVars' )
local deque = require( 'lib.deque' )


-- can use socket.gettime() too:
math.randomseed( os.time() )


local lvl_speed  = {  150,  200,  250,  300,  350,  400 }
local lvl_period = {  4.0,  3.5,  3.0,  2.5,  2.0,  1.5 }

function check_level_up( self )
	n_hit = 0
	n_miss = 0
	for obj in self.last_tgts:iterRight() do
		if( obj == 'hit' ) then
			n_hit = n_hit + 1
		elseif( obj == 'miss' ) then
			n_miss = n_miss + 1
		elseif( obj == 'level' ) then
			break
		end
	end

	if( n_hit >= 10 ) then
		self.last_tgts:pushRight( 'level' )
		msg.post( '/basehud/hud', 'level_up' )
		self.level = self.level + 1
		if( self.level > 6 ) then
			self.level = 6
		end
	end
end


function init(self)
	self.timer = 0
	self.last_tgts = deque.new(20)
	self.level = 1
	self.active = false

	msg.post( '/basehud/hud', 'register', { script='/gamelogic#gamelogic', type='single', bottom_color='green' } )
	msg.post( '/basehud/hud', 'ready_go', {} )

	msg.post( '.', 'acquire_input_focus' )
end


function update(self, dt)
	if( self.active ) then
		self.timer = self.timer - dt
		if( self.timer <= 0 ) then
			self.timer = lvl_period[self.level]
			local spd = lvl_speed[self.level]
			local rn = math.random()
			if( rn < 0.20 ) then
				factory.create( '#factory_top', nil, nil, { speed=spd*1.1 } )
			elseif( rn < 0.40 ) then
				factory.create( '#factory_duck', nil, nil, { layer=1, speed=spd } )
			elseif( rn < 0.60 ) then
				factory.create( '#factory_target', nil, nil, { layer=1, speed=spd } )
			elseif( rn < 0.80 ) then
				factory.create( '#factory_duck', nil, nil, { layer=0, speed=spd } )
			else
				factory.create( '#factory_target', nil, nil, { layer=0, speed=spd } )
			end
		end
	end

end


function on_message(self, message_id, message, sender)
	if( message_id == hash('score') ) then
		-- pass 'score' msg on to hud
		if( self.active ) then
			msg.post( '/basehud/hud', message_id, message )
		end
	elseif( message_id == hash('complete') ) then
		print('intercepted complete', self.active)
		go.delete( sender )
		if( self.active ) then
			if( message.hit ) then
				self.last_tgts:pushRight( 'hit' )
			else
				self.last_tgts:pushRight( 'miss' )
				-- pass 'miss' msg on to hud
				msg.post( '/basehud/hud', 'missed', message )
			end

			check_level_up( self )
		end

	elseif( message_id == hash('game_start') ) then
		self.active = true
	elseif( message_id == hash('game_over') ) then
		self.active = false
	elseif( message_id == hash('back_button') ) then
		if( self.active ) then
			self.active = false
			msg.post( '/basehud/hud', 'game_exit' )
		else
			msg.post( 'loader:/go#loader', 'start_mainmenu' )
		end
	elseif( message_id == hash('final_exit') ) then
		self.active = false
		msg.post( 'loader:/go#loader', 'start_mainmenu' )
	else
		print('unknown message - '..message_id )
	end
end


function on_input(self, action_id, action)
	-- should only trigger if no other target accepted this key-press
	local rtn = false
	if( self.active and (action_id == hash('keypress')) ) then
		print('missed key-press')
		self.last_tgts:pushRight( 'typo' )
		rtn = true
	end
	return rtn
end
