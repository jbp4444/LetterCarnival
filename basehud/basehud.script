

local digits = { 'score#digit1000', 'score#digit100', 'score#digit10', 'score#digit1' }
local health_go = { '/hud/health1', '/hud/health2', '/hud/health3', '/hud/health4', '/hud/health5' }

function render_score( score )
	local n = score
	local mpy = 1000
	local transp = true

	for i,dobj in ipairs(digits) do
		j = math.floor( n / mpy )
		local img
		if( (j==0) and (transp==true) and (i<4) ) then
			img = 'transparent32'
		else
			img = 'text_' .. tostring(j)
			transp = false
		end
		-- print( i,dobj, n,mpy,j, img )
		msg.post( dobj, 'play_animation', {id=hash(img)} )

		n = n - j*mpy
		mpy = mpy / 10
	end

end

function render_hits( hits )
	if( hits > 5 ) then
		hits = 5
	end
	for i=1,hits do
		msg.post( health_go[i], 'play_animation', {id=hash('text_cross_blk')} )
	end
end


function start_anim4( self )
	print( 'start-anim phase 4' )
	msg.post( '/player', 'game_start' )
	msg.post( '/opponent', 'game_start' )
end
function start_anim3( self )
	print( 'start-anim phase 3' )
	go.set( '/basehud/hud/flag_go', 'euler.z', 0 )
	go.animate( '/basehud/hud/flag_go', 'euler.z', go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_LINEAR, 0.5, 0.33, start_anim4 )
end
function start_anim2( self )
	print( 'start-anim phase 2' )
	go.set( '/basehud/hud/flag_ready', 'euler.z', 0 )
	go.animate( '/basehud/hud/flag_ready', 'euler.z', go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_LINEAR, 0.5, 0.33 )
	go.animate( '/basehud/hud/flag_go', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0.33, start_anim3 )
end
function start_anim1( self )
	print( 'start-anim phase 1' )
	go.animate( '/basehud/hud/flag_ready', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, start_anim2 )
end

function gameover_anim( self )
	print( 'gameover-anim phase 1' )
	go.animate( '/basehud/hud/flag_gameover', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5 )
	msg.post( '/basehud/backbutton#sprite', 'enable' )
end

function losing_anim( self )
	print( 'losing-anim phase 1' )
	go.animate( '/basehud/hud/flag_playerloses', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5 )
	msg.post( '/basehud/backbutton#sprite', 'enable' )
end
function winning_anim2( self )
	print( 'winning-anim phase 2' )
	particlefx.play( '/basehud/hud/flag_playerwins#fireworks' )
	msg.post( '/basehud/backbutton#sprite', 'enable' )
end
function winning_anim( self )
	print( 'winning-anim phase 1' )
	go.animate( '/basehud/hud/flag_playerwins', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, winning_anim2 )
end

function init(self)
	-- Add initialization code here
	print( 'hud-init' )
	self.have_winner = false

	self.score = 0
	self.hits  = 0

	render_score( self.score )
	render_hits( self.hits )
	
	msg.post( '/basehud/backbutton#sprite', 'disable' )
	msg.post( '.', 'acquire_input_focus' )
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	if( message_id == hash('score') ) then
		self.score = self.score + message.score
		render_score( self.score )

		local m_obj = mole_objs[message.mole_id]
		local pos = go.get_position( m_obj )
		local sprkl = factory.create("/sparkleFactory#factory", pos, nil, {}, nil )

	elseif( message_id == hash('render_hits') ) then
		print( 'rendering hits' )
		render_hits( self.hits )
		if( self.hits > 5 ) then
			print( 'GAME OVER' )
			msg.post( '/basehud/hud/hud#hud', 'game_over' )
		end

	elseif( message_id == hash('missed') ) then
		local props = {
			final_pos = vmath.vector3( 1024,640, message.pos.z )
		}
		self.hits = self.hits + 1
		if( self.hits <= 5 ) then
			local h = health_go[self.hits]
			print( 'hit-x', h )
			props.final_pos = go.get_position( h )
		end
		props.final_pos.z = message.pos.z
		print( 'missed mole ',message.pos, props.final_pos )
		local xmark = factory.create("/xmarkFactory#factory", message.pos, nil, props, nil )

	elseif( message_id == hash('ready_go') ) then
		if( self.have_winner == false ) then
			print( 'hud - ready-set-go' )
			start_anim1()
		end
	elseif( message_id == hash('player_wins') ) then
		if( self.have_winner == false ) then
			print( 'hud - player wins' )
			self.have_winner = true
			winning_anim()
		end
	elseif( message_id == hash('player_loses') ) then
		if( self.have_winner == false ) then
			print( 'hud - player loses' )
			self.have_winner = true
			losing_anim()
		end
	elseif( message_id == hash('game_over') ) then
		if( self.have_winner == false ) then
			print( 'hud - game over' )
			self.have_winner = true
			gameover_anim()
		end
	elseif( message_id == hash('color_red') ) then
		print( 'hud - color-red' )
		msg.post( '/basehud/curtains_bottom#sprite', 'play_animation', {id=hash('bg_red')} )
		msg.post( '/basehud/curtains_bottom#sprite1', 'play_animation', {id=hash('bg_red')} )
		msg.post( '/basehud/curtains_bottom#sprite2', 'play_animation', {id=hash('bg_red')} )
		msg.post( '/basehud/curtains_bottom#sprite3', 'play_animation', {id=hash('bg_red')} )
	elseif( message_id == hash('color_blue') ) then
		print( 'hud - color-blue' )
		msg.post( '/basehud/curtains_bottom#sprite', 'play_animation', {id=hash('bg_blue')} )
		msg.post( '/basehud/curtains_bottom#sprite1', 'play_animation', {id=hash('bg_blue')} )
		msg.post( '/basehud/curtains_bottom#sprite2', 'play_animation', {id=hash('bg_blue')} )
		msg.post( '/basehud/curtains_bottom#sprite3', 'play_animation', {id=hash('bg_blue')} )
	elseif( message_id == hash('color_green') ) then
		print( 'hud - color-green' )
		msg.post( '/basehud/curtains_bottom#sprite', 'play_animation', {id=hash('bg_green')} )	
		msg.post( '/basehud/curtains_bottom#sprite1', 'play_animation', {id=hash('bg_green')} )
		msg.post( '/basehud/curtains_bottom#sprite2', 'play_animation', {id=hash('bg_green')} )
		msg.post( '/basehud/curtains_bottom#sprite3', 'play_animation', {id=hash('bg_green')} )
	end
end


function on_input( self, action_id, action )
	local rtn = false
	if( (action_id==hash("touch")) and (action.released==true) and (self.have_winner==true) ) then
		local btn_pos = go.get_position('/basehud/backbutton#sprite')
		local btn_size = go.get( '/basehud/backbutton#sprite', 'size' )
		print( 'btn pos=', btn_pos, ' size=', btn_size )

		local x0 = btn_pos.x - btn_size.x/2
		local x1 = btn_pos.x + btn_size.x/2
		local y0 = btn_pos.y - btn_size.y/2
		local y1 = btn_pos.y + btn_size.y/2

		if( (action.x>=x0) and (action.x<=x1) and (action.y>=y0) and (action.y<=y1) ) then
			print( 'backbutton clicked!' )
			msg.post("loader:/go#loader", "start_mainmenu" )
			rtn = true
		end
	end
	return rtn
end


function on_message(self, message_id, message, sender)
	-- Add message-handling code here
end

