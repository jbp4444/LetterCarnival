
local bz = require("bzAnim.bzLibrary")


local digits = { 'score#digit1000', 'score#digit100', 'score#digit10', 'score#digit1' }
local health_go = { '/basehud/health#health1', '/basehud/health#health2', '/basehud/health#health3', '/basehud/health#health4', '/basehud/health#health5' }
local level_go = { '/basehud/level#level1', '/basehud/level#level2', '/basehud/level#level3', '/basehud/level#level4', '/basehud/level#level5' }
local flags_go = { '/basehud/flag_go', '/basehud/flag_ready', '/basehud/flag_gameover', '/basehud/flag_exit', '/basehud/flag_playerloses', '/basehud/flag_playerwins' }


function render_score( score )
	local n = score
	local mpy = 1000
	local transp = true

	print( 'hud - render_score' )
	for i,dobj in ipairs(digits) do
		j = math.floor( n / mpy )
		local img
		if( (j==0) and (transp==true) and (i<4) ) then
			img = 'transparent32'
		else
			img = 'text_' .. tostring(j)
			transp = false
		end
		-- print( i,dobj, n,mpy,j, img )
		msg.post( dobj, 'play_animation', {id=hash(img)} )

		n = n - j*mpy
		mpy = mpy / 10
	end

end

function render_hits( hits )
	print( 'hud - render_hits' )
	if( hits > 5 ) then
		hits = 5
	end
	for i=1,hits do
		msg.post( health_go[i], 'play_animation', {id=hash('text_cross_blk')} )
	end
end

function render_level( level, show_splash )
	print( 'hud - render_level' )
	if( level > 5 ) then
		level = 5
	end
	if( show_splash ) then
		local pos = go.get_position( level_go[level] )
		pos.x = pos.x + (level-1)*50
		obj = factory.create( '/basehud/sparkleFactory#factory', pos )
		particlefx.play( obj )
		sound.play( '/basehud/level#sound' )
		timer.delay(1.0, false, function()
			go.delete(obj)
			end)
	end
	for i=1,5 do
		if( level >= i ) then
			msg.post( level_go[i], 'enable' )
		else
			msg.post( level_go[i], 'disable' )
		end
	end
end


function start_anim4( self )
	print( 'start-anim phase 4' )
	if( self.game_script ~= nil ) then
		print( 'sending game_start msg to ', self.game_script )
		msg.post( self.game_script, 'game_start' )
	end
end
function start_anim3( self )
	print( 'start-anim phase 3' )
	go.set( '/basehud/flag_go', 'euler.z', 0 )
	go.animate( '/basehud/flag_go', 'euler.z', go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_LINEAR, 0.5, 0.33, start_anim4 )
end
function start_anim2( self )
	print( 'start-anim phase 2' )
	go.set( '/basehud/flag_ready', 'euler.z', 0 )
	go.animate( '/basehud/flag_ready', 'euler.z', go.PLAYBACK_ONCE_FORWARD, -90, go.EASING_LINEAR, 0.5, 0.33 )
	go.animate( '/basehud/flag_go', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0.33, start_anim3 )
end
function gameexit_anim2( self )
	print( 'gameexit-anim phase 2' )
	if( self.game_script ~= nil ) then
		print( 'sending game_over msg to ', self.game_script )
		timer.delay( 1.0, false, function()
			msg.post( self.game_script, 'final_exit' )
		end)
	end
end
function winning_anim2( self )
	print( 'winning-anim phase 2' )
	particlefx.play( '/basehud/flag_playerwins#fireworks' )
	-- msg.post( '/basehud/backbutton#sprite', 'enable' )
end

function show_flag( self, flag )
	-- rotate out any existing flags
	for i=1,#flags_go do
		rot_q = go.get_world_rotation( flags_go[i] )
		print( i, rot_q )
		if( rot_q.w >= 0.98 ) then
			go.animate( flags_go[i], 'euler.z', go.PLAYBACK_ONCE_FORWARD, -180, go.EASING_LINEAR, 0.50 )
		end
	end
	if( flag == 'ready_go' ) then
		print( 'start-anim phase 1' )
		go.animate( '/basehud/flag_ready', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, start_anim2 )
	elseif( flag == 'game_over' ) then
		print( 'gameover-anim phase 1' )
		go.animate( '/basehud/flag_gameover', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5 )
	elseif( flag == 'game_exit' ) then
		print( 'gameexit-anim phase 1' )
		go.animate( '/basehud/flag_exit', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, gameexit_anim2 )
	elseif( flag == 'player_wins' ) then
		print( 'winning-anim phase 1' )
		go.animate( '/basehud/flag_playerwins', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5, 0, winning_anim2 )
	elseif( flag == 'player_loses' ) then
		print( 'losing-anim phase 1' )
		go.animate( '/basehud/flag_playerloses', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5 )
	else
		print('unknown flag', flag )
	end
end


function init(self)
	-- Add initialization code here
	print( 'hud-init' )
	self.have_winner = false

	self.score = 0
	self.hits  = 0
	self.level = 0
	self.game_script = false

	render_score( self.score )
	render_hits( self.hits )
	render_level( self.level, false )

	msg.post( '.', 'acquire_input_focus' )
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	if( message_id == hash('score') ) then
		sound.play( 'score#sound' )
		self.score = self.score + message.score
		render_score( self.score )

	elseif( message_id == hash('missed') ) then
		local props = {
			final_pos = vmath.vector3( 1024,640, 0.95 )  -- z should be message.pos.z?
		}
		print( 'missed ',message.pos, props.final_pos )
		self.hits = self.hits + 1
		if( self.hits > 5 ) then
			self.active = false
		else
			local h = health_go[self.hits]
			print( 'hit-x', h )
			props.final_pos = go.get_position( h )
			props.final_pos.x = props.final_pos.x + 60*(self.hits-1) -- fudge/fix for sprite posn inside g.o.
			props.hit_num = self.hits
		end
		local xmark = factory.create("xmarkFactory#factory", message.pos, nil, nil, nil )
		bz.animate({
			obj = xmark, 
			duration = 1.0,
			delay = 0.0,
			on_complete = '/basehud/hud',
			path={
				{ x=512, y=320 },
				{ x=props.final_pos.x, y=props.final_pos.y },
			},
		})

	elseif( message_id == hash('level_up') ) then
		self.level = self.level + 1
		render_level( self.level, true )
	elseif( message_id == hash('set_level') ) then
		self.level = message.level
		render_level( self.level, false )

	elseif( message_id == hash('anim_complete') ) then
		-- TODO: if we animate anything else, we'll need to decipher it here
		print('anim-complete for ', message)
		sound.play( 'health#sound' )
		render_hits( self.hits )
		if( self.hits > 5 ) then
			print( 'GAME OVER' )
			msg.post( '.', 'game_over' )
		end

	elseif( message_id == hash('ready_go') ) then
		if( self.have_winner == false ) then
			print( 'hud - ready-set-go' )
			show_flag( self, 'ready_go' )
		end
	elseif( message_id == hash('game_over') ) then
		-- this can be triggered by the HUD itself or by the gamelogic
		print( 'hud - game over' )
		if( self.game_script ~= nil ) then
			print( 'sending game_over msg to ', self.game_script )
			msg.post( self.game_script, 'game_over' )
		end
		self.have_winner = true
		if( message.player_wins ) then
			show_flag( self, 'player_wins' )
		elseif( message.player_loses ) then
			show_flag( self, 'player_loses' )
		else
			show_flag( self, 'game_over' )
		end
	elseif( message_id == hash('game_exit') ) then
		print( 'hud - game exit' )
		show_flag( self, 'game_exit' )
	elseif( message_id == hash('register') ) then
		print( 'hud - register game script ', sender, message )
		if( message.script ~= nil ) then
			-- if user sent url='.', then send to graphics-object
			if( message.script == true or message.script == '.' ) then
				self.game_script = sender
			else
				self.game_script = message.script
			end
		end
		if( message.bottom_color ~= nil ) then
			if( message.bottom_color == 'red' ) then
				print( 'hud - color-red' )
				msg.post( '/basehud/curtains_bottom#sprite', 'play_animation', {id=hash('bg_red')} )
				msg.post( '/basehud/curtains_bottom#sprite1', 'play_animation', {id=hash('bg_red')} )
				msg.post( '/basehud/curtains_bottom#sprite2', 'play_animation', {id=hash('bg_red')} )
				msg.post( '/basehud/curtains_bottom#sprite3', 'play_animation', {id=hash('bg_red')} )
			elseif( message.bottom_color == 'blue' ) then
				print( 'hud - color-blue' )
				msg.post( '/basehud/curtains_bottom#sprite', 'play_animation', {id=hash('bg_blue')} )
				msg.post( '/basehud/curtains_bottom#sprite1', 'play_animation', {id=hash('bg_blue')} )
				msg.post( '/basehud/curtains_bottom#sprite2', 'play_animation', {id=hash('bg_blue')} )
				msg.post( '/basehud/curtains_bottom#sprite3', 'play_animation', {id=hash('bg_blue')} )
			elseif( message.bottom_color == 'green' ) then
				print( 'hud - color-green' )
				msg.post( '/basehud/curtains_bottom#sprite', 'play_animation', {id=hash('bg_green')} )	
				msg.post( '/basehud/curtains_bottom#sprite1', 'play_animation', {id=hash('bg_green')} )
				msg.post( '/basehud/curtains_bottom#sprite2', 'play_animation', {id=hash('bg_green')} )
				msg.post( '/basehud/curtains_bottom#sprite3', 'play_animation', {id=hash('bg_green')} )
			end
		end
	end
end

function on_input( self, action_id, action )
	local rtn = false
	if( (action_id==hash("touch")) and (action.released==true) ) then
		local btn_pos = go.get_position('/basehud/backbutton#sprite')
		local btn_size = go.get( '/basehud/backbutton#sprite', 'size' )
		print( 'btn pos=', btn_pos, ' size=', btn_size )

		local x0 = btn_pos.x - btn_size.x/2
		local x1 = btn_pos.x + btn_size.x/2
		local y0 = btn_pos.y - btn_size.y/2
		local y1 = btn_pos.y + btn_size.y/2

		if( (action.x>=x0) and (action.x<=x1) and (action.y>=y0) and (action.y<=y1) ) then
			if( self.game_script ~= nil ) then
				print( 'sending back_button msg to ', self.game_script )
				msg.post( self.game_script, 'back_button' )
			end
			rtn = true
		end
	end
	return rtn
end

